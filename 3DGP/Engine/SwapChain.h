#pragma once

// 교환 사슬 - 더블 버퍼링 정확한 의미
	// [외주 과정]
	// - 현재 게임 세상에 있는 상황을 묘사
	// - 어떤 공식으로 어떻게 계산할지 던져줌
	// - GPU가 열심히 계산 (외주)
	// - 결과물 받아서 화면에 그려준다

	// [외주 결과물]을 어디에 받지?
	// - 어떤 종이(Buffer)에 그려서 건내달라고 부탁해보자
	// - 특수 종이를 만들어서 -> 처음에 건내주고 -> 결과물을 해당 종이에 받는다 OK
	// - 우리 화면에 특수 종이(외주 결과물) 출력해준다

	// [?]
	// - 그런데 화면에 현재 결과물 출력하는 와중에, 다음 화면도 외주를 맡겨야 함
	// - 현재 화면 결과물은 이미 화면 출력에 사용중
	// - 특수 종이를 2개 만들어서, 하나는 현재 화면을 그려주고, 하나는 외주 맡기고...
	// 현재껄 띄우되 다음에 나올 장면을 바로 외주 맡겨서 그리게 하고 그걸 띄우고
	// 그 전에 했던건 다시 외주 맡기고 반복하면 두 장으로 연속적인 연출을 낼 수 있음
	// - Double Buffering!

	// - [0] [1]
	// 현재 화면 [1]  <-> GPU 작업중 [1] BackBuffer

class SwapChain
{
	ComPtr<IDXGISwapChain> _swapChain;
	
	uint32 _backBufferIndex = 0; // 뒤에서 작업중인 버퍼 인덱스
	void CreateSwapChain(const WindowInfo& info, ComPtr<IDXGIFactory> dxgi, ComPtr<ID3D12CommandQueue> cmdQueue);
public:
	void Init(const WindowInfo& info, ComPtr<ID3D12Device> device, ComPtr<IDXGIFactory> dxgi, ComPtr<ID3D12CommandQueue> cmdQueue);
	void Present();
	void SwapIndex();

	ComPtr<IDXGISwapChain> GetSwapChain() { return _swapChain; }
	uint8 GetBackBufferIndex() { return _backBufferIndex;  }
};